/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package chatroom_server;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.CharBuffer;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author TungNguyen
 */
public class ServerView extends javax.swing.JFrame implements Runnable{
 
    Socket socket;
    ServerSocket serverSocket;
    ArrayList userList;
    Thread thread;
    int ConnCount=0,Port;
    InetAddress inet;

    DataInputStream in;
    DataOutputStream out;

    private FileProcess file;
    private String ConfigFile;

    /**
     * Creates new form ServerView
     */
    public ServerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblServerName = new javax.swing.JLabel();
        lblIP = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblNumberOfConnection = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        lblIP1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        CauhinhMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        AuthorMenu = new javax.swing.JMenuItem();
        clickExit = new javax.swing.JMenuItem();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Chat Server");

        jLabel3.setText("Thông tin Server");

        jLabel4.setText("Tên Server :");

        jLabel5.setText("IP:");

        jLabel6.setText("Status :");

        jLabel7.setText("Số kết nối :");

        lblServerName.setText("LocalHost");

        lblStatus.setText("Stop");

        lblNumberOfConnection.setText("0");

        btnStart.setText("Start");
        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStartMouseClicked(evt);
            }
        });
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStopMouseClicked(evt);
            }
        });

        lblIP1.setText("0.0.0.0");

        jMenu1.setText("File");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        CauhinhMenu.setText("Cấu hình");
        CauhinhMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CauhinhMenuActionPerformed(evt);
            }
        });
        jMenu1.add(CauhinhMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        AuthorMenu.setText("Author");
        AuthorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorMenuActionPerformed(evt);
            }
        });
        jMenu2.add(AuthorMenu);

        clickExit.setText("Exit");
        clickExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clickExitMouseClicked(evt);
            }
        });
        clickExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickExitActionPerformed(evt);
            }
        });
        jMenu2.add(clickExit);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(143, 143, 143))
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart)
                        .addGap(105, 105, 105)
                        .addComponent(btnStop)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNumberOfConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(59, 59, 59))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblServerName)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(124, 124, 124))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblServerName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblIP)
                    .addComponent(lblIP1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblStatus))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblNumberOfConnection))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStart)
                    .addComponent(btnStop))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartMouseClicked
      ConfigFile = "Config.ini";
        file = new FileProcess();
        try
        {
            FileReader read = file.FileRead(ConfigFile);
            BufferedReader reader = new BufferedReader(read);
            String line = reader.readLine();
            while(line != null)
            {
                if(line.startsWith("port"))
                {
                    String str[] = line.trim().split("=");
                    Port = Integer.parseInt(str[1].trim());
                }
                line = reader.readLine();
            }
            reader.close();
            read.close();

            try
            {
                 //bắt đầu chạy server
                inet=InetAddress.getLocalHost();
                serverSocket =new ServerSocket(Port);
                userList=new ArrayList();
                thread=new Thread(this);
                thread.start();

                //cập nhật thông tin trong các label
                lblServerName.setText(inet.getHostName());
                lblIP1.setText("192.168.5.124");
                lblStatus.setText("Đang nghe ở cổng " + Integer.toString(Port) + " ...");

                //xác lập chế độ hiển thị cho 2 button start và stop
                btnStart.setEnabled(false);
                btnStop.setEnabled(true);
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Có lỗi khi khởi động Server:\n" + ex.getMessage(),"Thông báo",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Lỗi đọc file cấu hình.\nBạn vui lòng chọn Menu 'Hệ thống', chọn 'Cấu hình cổng' để thiết lập lại thông số." ,"Thông báo",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnStartMouseClicked
 private void clickAbout(java.awt.event.MouseEvent evt) {                            
      Team ifTeam = new Team();
       ifTeam.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      ifTeam.show();
      
    }     
    
    private void btnStopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStopMouseClicked
     try
        {
            if(thread!=null)
            {
                //Gửi thông báo cho các client biết server sẽ dừng

                //hủy socket
                serverSocket.close();
                
                //dừng luồng
                thread.stop();
                thread=null;

                //reset các arrayList
                userList.clear();

                //cập nhật lại thông tin hiển thị trên các label
                lblServerName.setText(inet.getHostName());
                lblIP1.setText("0.0.0.0");
                lblStatus.setText("Stop...");
                lblNumberOfConnection.setText("" + 0);
                ConnCount = 0;

                //xác lập chế độ hiển thị cho 2 button start và stop
                btnStart.setEnabled(true);
                btnStop.setEnabled(false);
            }
        }
        catch(Exception ex)
        {
            javax.swing.JOptionPane.showMessageDialog(null, " ");
        }   
       
    }//GEN-LAST:event_btnStopMouseClicked

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

     private void menuItemServerActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        
    }       
    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem_AuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AuthorActionPerformed
        
        Team team = new Team();
        team.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        team.show();
    }//GEN-LAST:event_jMenuItem_AuthorActionPerformed

    private void CauhinhMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CauhinhMenuActionPerformed
      FrameCauhinh fc=new FrameCauhinh();
        fc.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        fc.setTitle("Cấu hình kết nối");
       
        fc.show();
    }//GEN-LAST:event_CauhinhMenuActionPerformed

    private void AuthorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorMenuActionPerformed
       Team fc=new Team();
        fc.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        fc.setTitle("Cấu hình kết nối");
       
        fc.show();
    }//GEN-LAST:event_AuthorMenuActionPerformed

    private void clickExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_clickExitActionPerformed

    private void clickExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickExitMouseClicked
         System.exit(0);
    }//GEN-LAST:event_clickExitMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AuthorMenu;
    private javax.swing.JMenuItem CauhinhMenu;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JMenuItem clickExit;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblIP;
    private javax.swing.JLabel lblIP1;
    private javax.swing.JLabel lblNumberOfConnection;
    private javax.swing.JLabel lblServerName;
    private javax.swing.JLabel lblStatus;
    // End of variables declaration//GEN-END:variables

    

    @Override
    public void run() {
    try
        {
        //nạp chồng phương thức run của thread
           while(thread!=null)
           {
               //lắng nghe
                socket = serverSocket.accept();
                //sendDebug(socket, "Hello word");
                lblNumberOfConnection.setText("Da co Client Ket noi toi");
                ChatProcess chatClient = new ChatProcess(socket, this);
                //khi có client kết nối thì khởi tạo lớp xử lý mới
              
                thread.sleep(500);
           }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Loi server: " + ex.getMessage());
        }
    }
    protected void debug(String msg)
    {
        lblStatus.setText(msg);
    }
protected void IncConnectionCount()
    {
        //Hien Thi tang ket noi khi co client toi
        ConnCount++ ;
        lblNumberOfConnection.setText(Integer.toString(ConnCount));
    }
protected void DecConnectionCount()
    {
        //khi co user thoat se giam di ket noi
        ConnCount-- ;
        lblNumberOfConnection.setText(Integer.toString(ConnCount));
    }
 
 protected UserClient getUsrClient(String UserName)
    {
        //thủ tục tìm socket tương ứng với UserName đầu vào
        int usrArraySize=userList.size();
        UserClient client = null;
        for(int i=0;i<usrArraySize;i++)
        {
            client=(UserClient)userList.get(i);
            if(client.getUserName().equalsIgnoreCase(UserName))
            {
                return client;
            }
        }
        return null;
    }
 private boolean checkExistUser(String UserName)
    {
        //thủ tục kiểm tra sự tồn tại của User trong arraylist
        if(getUsrClient(UserName)!=null)
            return true;
        else
            return false;
    }
 
 private void addUser(Socket clientSocket ,String User , String roomName ){
     
     if(checkExistUser(User)== false){
         UserClient userClient = new UserClient(clientSocket, roomName, roomName);
         userList.add(userClient);
         
     }
 }
 private void removeUser(String User){
     UserClient tmpUserClient = getUsrClient(User);
     if(tmpUserClient != null){
         userList.remove(tmpUserClient);
         userList.trimToSize();
     }
     
     
 }  
 protected  void setRoomName(String UserName,String RoomName){
     UserClient tmpObject = getUsrClient(UserName);
     System.out.println(tmpObject.getRoomName() + "-" + tmpObject.getUserName());
     tmpObject.setRoomName(RoomName);
     
 }
  protected void UserExit(String UserName,String RoomName)
    {
        try
        {
            removeUser(UserName);
            String Msg = "<font face =\"Arial\" size = 14 color = \"#ff0000\">" + UserName + " đã ra khỏi phòng...</font>";
            SendMessageToRoom(RoomName, UserName, "ROOMCHAT::" + Msg);
            Msg = getUserListInRoom(RoomName); //lấy danh sách user còn lại trong phòng
            SendMessageToRoom(RoomName, UserName,"ROOMLIST::" + Msg);
        }
        catch(Exception ex)
        {

        }
    }
   protected void SendMessToClient(Socket clientSocket,String Message)
    {
        //thủ tục gửi thông điệp cho cửa sổ chính CLient - cửa sổ phòng chát
        try
        {
            out = new DataOutputStream(clientSocket.getOutputStream());
            //out.writeBytes(Message + "\r\n");
            out.writeUTF(Message + "\r\n");
            //out.flush();
        }
        catch(IOException ex)
        {
        }
        catch(Exception ex)
        {
        }
        }

    private void SendMessageToRoom(String RoomName, String UserName, String Message) {
        //Cập nhật lại danh sách User Từ Server gửi tới
       UserClient usrTmp = null;
        Socket tmpSocket = null;
        
       
        //gửi cho tất cả các UserTrong cùng phòng
        for(Object c:userList)
        {
            usrTmp = (UserClient)c;
            if(usrTmp.getRoomName().equalsIgnoreCase(RoomName))
            {
                tmpSocket = usrTmp.getSocket();
                //SendMessToClient(tmpSocket, MessageToSend);
                if(usrTmp.getUserName().equalsIgnoreCase(UserName) != true)
                {
                    //System.out.println(UserName);
                    SendMessToClient(tmpSocket,Message);
                }
            }
        }
    }

    private String getUserListInRoom(String RoomName) {
        
        //Thủ tục lấy danh sách User Trong Phòng gửi cho Client
        StringBuilder tmp = new StringBuilder();
        UserClient usrTmp = null;
        Socket tmpSocket = null;
        for(Object c:userList)
        {
            usrTmp = (UserClient)c;
            if(usrTmp.getRoomName().equalsIgnoreCase(RoomName))
            {
                tmp.append(usrTmp.getUserName() + "--");
            }
        }
        if(tmp.length() > 3)
            tmp = tmp.delete(tmp.length()-2,tmp.length()); //Loại bỏ 2 kí tự cuối
        return tmp.toString();
    }
 
 
}


